{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nfunction MarvelSnapDeckRandomiserComponent_p_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\")(1, \"em\");\n    i0.ɵɵtext(2, \"Loading...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction MarvelSnapDeckRandomiserComponent_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"div\", 4);\n    i0.ɵɵelement(2, \"img\", 5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const card_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"src\", card_r3.picUrl, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction MarvelSnapDeckRandomiserComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, MarvelSnapDeckRandomiserComponent_div_5_div_1_Template, 3, 1, \"div\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.deck);\n  }\n}\nexport class MarvelSnapDeckRandomiserComponent {\n  constructor(http, baseUrl) {\n    this.deck = [];\n    http.get(baseUrl + 'deck').subscribe(result => {\n      this.deck = result;\n    }, error => console.error(error));\n  }\n}\nMarvelSnapDeckRandomiserComponent.ɵfac = function MarvelSnapDeckRandomiserComponent_Factory(t) {\n  return new (t || MarvelSnapDeckRandomiserComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n};\nMarvelSnapDeckRandomiserComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MarvelSnapDeckRandomiserComponent,\n  selectors: [[\"app-marvel-snap-deck-randomiser\"]],\n  decls: 6,\n  vars: 2,\n  consts: [[\"id\", \"tableLabel\"], [4, \"ngIf\"], [\"class\", \"card-display\", 4, \"ngFor\", \"ngForOf\"], [1, \"card-display\"], [1, \"card-image\"], [3, \"src\"]],\n  template: function MarvelSnapDeckRandomiserComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1, \"Marvel Snap Deck Randomiser\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"p\");\n      i0.ɵɵtext(3, \"This component demonstrates fetching data from the server.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, MarvelSnapDeckRandomiserComponent_p_4_Template, 3, 0, \"p\", 1);\n      i0.ɵɵtemplate(5, MarvelSnapDeckRandomiserComponent_div_5_Template, 2, 1, \"div\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", !ctx.deck);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.deck);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf],\n  styles: [\".card-display[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  gap: 10px;\\n  width: 1250px;\\n}\\n\\n.card-image[_ngcontent-%COMP%] {\\n  width: 200px;\\n  background-color: red;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWFydmVsLXNuYXAtZGVjay1yYW5kb21pc2VyL21hcnZlbC1zbmFwLWRlY2stcmFuZG9taXNlci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQUE7RUFDQSxzQkFBQTtFQUNBLGVBQUE7RUFDQSx1QkFBQTtFQUNBLFNBQUE7RUFDQSxhQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0VBQ0EscUJBQUE7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi5jYXJkLWRpc3BsYXkge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgZ2FwOiAxMHB4O1xyXG4gIHdpZHRoOiAxMjUwcHg7XHJcbn1cclxuXHJcbi5jYXJkLWltYWdlIHtcclxuICB3aWR0aDogMjAwcHg7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkOztcclxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":";;;;;IAIAA,yBAAiB;IAAIA,0BAAU;IAAAA,iBAAK;;;;;IAIlCA,8BAAoD;IAGhDA,yBAAyB;IAC3BA,iBAAM;;;;IADCA,eAAmB;IAAnBA,iEAAmB;;;;;IAJ9BA,2BAAkB;IAChBA,wFAKM;IAERA,iBAAM;;;;IAPkBA,eAAO;IAAPA,qCAAO;;;ACA/B,OAAM,MAAOC,iCAAiC;EAG5CC,YAAYC,IAAgB,EAAsBC,OAAe;IAF1D,SAAI,GAAkB,EAAE;IAG7BD,IAAI,CAACE,GAAG,CAAgBD,OAAO,GAAG,MAAM,CAAC,CAACE,SAAS,CAACC,MAAM,IAAG;MAC3D,IAAI,CAACC,IAAI,GAAGD,MAAM;IACpB,CAAC,EAAEE,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;;AAPWR,iCAAiC;mBAAjCA,iCAAiC,4DAGN,UAAU;AAAA;AAHrCA,iCAAiC;QAAjCA,iCAAiC;EAAAU;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDR9Cf,6BAAoB;MAAAA,2CAA2B;MAAAA,iBAAK;MAEpDA,yBAAG;MAAAA,0EAA0D;MAAAA,iBAAI;MAEjEA,8EAAwC;MAGxCA,kFAQM;;;MAXFA,eAAW;MAAXA,gCAAW;MAGTA,eAAU;MAAVA,+BAAU","names":["i0","MarvelSnapDeckRandomiserComponent","constructor","http","baseUrl","get","subscribe","result","deck","error","console","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\caleb\\Documents\\GitHub\\MarvelSnapDeckRandomiser\\ClientApp\\src\\app\\marvel-snap-deck-randomiser\\marvel-snap-deck-randomiser.component.html","C:\\Users\\caleb\\Documents\\GitHub\\MarvelSnapDeckRandomiser\\ClientApp\\src\\app\\marvel-snap-deck-randomiser\\marvel-snap-deck-randomiser.component.ts"],"sourcesContent":["<h1 id=\"tableLabel\">Marvel Snap Deck Randomiser</h1>\r\n\r\n<p>This component demonstrates fetching data from the server.</p>\r\n\r\n<p *ngIf=\"!deck\"><em>Loading...</em></p>\r\n\r\n\r\n<div *ngIf=\"deck\">\r\n  <div *ngFor=\"let card of deck\" class=\"card-display\">\r\n    <!-- <h2>{{ card.cardName }}</h2> -->\r\n    <div class=\"card-image\">\r\n      <img src={{card.picUrl}}>\r\n    </div>\r\n  </div>\r\n  \r\n</div>\r\n\r\n\r\n<!-- <table class='table table-striped' aria-labelledby=\"tableLabel\" *ngIf=\"deck\">\r\n  <thead>\r\n    <tr>\r\n      <th>Name</th>\r\n      <th>Energy</th>\r\n      <th>Power</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>{{ deck.name }}</td>\r\n      <td>{{ deck.energy }}</td>\r\n      <td>{{ deck.power }}</td>\r\n\r\n      <td><img src=\"https://game-assets.snap.fan/card_variant_images/Armor-36ce6f534b56d051b0a402ff4923a183cfad4b937fa4a401b0212da6d70e087f.webp\"></td>\r\n    </tr>\r\n  </tbody>\r\n</table> -->\r\n","import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-marvel-snap-deck-randomiser',\r\n  templateUrl: './marvel-snap-deck-randomiser.component.html',\r\n  styleUrls: ['./marvel-snap-deck-randomiser.component.scss']\r\n})\r\nexport class MarvelSnapDeckRandomiserComponent {\r\n  public deck: DisplayCard[] = [];\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    http.get<DisplayCard[]>(baseUrl + 'deck').subscribe(result => {\r\n      this.deck = result;\r\n    }, error => console.error(error));\r\n  }\r\n}\r\n\r\ninterface DisplayCard {\r\n  cardName: string;\r\n  picUrl: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}